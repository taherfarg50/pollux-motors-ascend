// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { log } from '@/utils/logger';

const SUPABASE_URL = "https://gjsektwcdvontsnyqobx.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imdqc2VrdHdjZHZvbnRzbnlxb2J4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY5ODM1ODcsImV4cCI6MjA2MjU1OTU4N30.GCOueFVU9bWOXriqGrekpsyhvJ70SFg6l9j5BnEVRzo";

// Validate configuration
if (!SUPABASE_URL || !SUPABASE_PUBLISHABLE_KEY) {
  const error = 'Missing Supabase configuration. Please check SUPABASE_URL and SUPABASE_PUBLISHABLE_KEY.';
  log.error(error, undefined, 'SupabaseClient');
  throw new Error(error);
}

// Create Supabase client with enhanced configuration
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true,
    storage: typeof window !== 'undefined' ? window.localStorage : undefined,
  },
  realtime: {
    params: {
      eventsPerSecond: 10,
    },
  },
  global: {
    headers: {
      'x-client-info': 'pollux-motors@1.0.0',
    },
  },
});

// Connection health check
export const testSupabaseConnection = async (): Promise<boolean> => {
  try {
    log.debug('Testing Supabase connection...', undefined, 'SupabaseClient');
    
    // Simple query to test connection
    const { data, error } = await supabase
      .from('cars')
      .select('id')
      .limit(1);
    
    if (error) {
      log.error('Supabase connection test failed', error, 'SupabaseClient');
      return false;
    }
    
    log.info('Supabase connection test successful', { recordCount: data?.length || 0 }, 'SupabaseClient');
    return true;
  } catch (error) {
    log.error('Supabase connection test error', error, 'SupabaseClient');
    return false;
  }
};

// Initialize connection monitoring
if (typeof window !== 'undefined') {
  // Test connection on app start
  testSupabaseConnection().then(isConnected => {
    if (isConnected) {
      log.info('Supabase client initialized successfully', undefined, 'SupabaseClient');
    } else {
      log.warn('Supabase connection issues detected on initialization', undefined, 'SupabaseClient');
    }
  });

  // Monitor auth state changes
  supabase.auth.onAuthStateChange((event, session) => {
    log.debug('Auth state changed', { event, userId: session?.user?.id }, 'SupabaseAuth');
    
    if (event === 'SIGNED_IN') {
      log.info('User signed in', { userId: session?.user?.id }, 'SupabaseAuth');
    } else if (event === 'SIGNED_OUT') {
      log.info('User signed out', undefined, 'SupabaseAuth');
    } else if (event === 'TOKEN_REFRESHED') {
      log.debug('Auth token refreshed', undefined, 'SupabaseAuth');
    }
  });
}

// Export enhanced error handler for Supabase operations
export const handleSupabaseError = (error: any, operation: string, context?: string) => {
  const errorMessage = error?.message || 'Unknown Supabase error';
  const errorCode = error?.code || 'UNKNOWN_ERROR';
  
  log.error(`Supabase ${operation} failed`, {
    message: errorMessage,
    code: errorCode,
    details: error?.details,
    hint: error?.hint
  }, context || 'SupabaseOperation');
  
  // Return user-friendly error message
  switch (errorCode) {
    case 'PGRST116':
      return 'No data found for your request.';
    case 'PGRST301':
      return 'Access denied. Please check your permissions.';
    case '23505':
      return 'This record already exists.';
    case '23503':
      return 'Cannot delete this record as it is referenced by other data.';
    case 'PGRST204':
      return 'Connection timeout. Please try again.';
    default:
      return 'An error occurred while processing your request. Please try again.';
  }
};

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";